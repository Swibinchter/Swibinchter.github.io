[{"title":"新文章测试图片","date":"2022-11-03T02:34:21.000Z","path":"2022/11/03/新文章测试图片/","text":"我是标题本文是为了测试图片按照hexo官方方法 下面是测试图片，运用常规Markdown语法","content":"<h1 id=\"我是标题\"><a href=\"#我是标题\" class=\"headerlink\" title=\"我是标题\"></a>我是标题</h1><h2 id=\"本文是为了测试图片\"><a href=\"#本文是为了测试图片\" class=\"headerlink\" title=\"本文是为了测试图片\"></a>本文是为了测试图片</h2><p>按照hexo官方方法</p>\n<p>下面是测试图片，运用常规Markdown语法</p>\n<img src=\"/2022/11/03/%E6%96%B0%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/1.png\" class=\"\" title=\"测试图片\">","categories":[{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"Python文件打包封装为exe","date":"2022-10-31T16:23:35.000Z","path":"2022/11/01/Python文件打包封装为exe/","text":"Python文件打包封装为exe一、创建虚拟环境 使用虚拟环境封装，会避免封装用不到的库，降低文件大小 Pycharm中，文件，新建项目，选择Flask，选择一个位置，在后面添加\\项目名用于创建一个名字为项目名的文件夹，创建 删掉目录下的默认生成的文件，将要打包的文件粘贴进来 使用python -m venv venv创建虚拟环境，成功后会生成一个venv的目录，里面是虚拟环境的配置文件 修改解释器为虚拟环境，Pycharm中，文件，设置，项目:项目名，Python解释器，全部显示，添加，Virtualenv环境，现有环境，检查下目录无误后确定，选择刚创建的解释器，确定，应用，确定 关闭Pycharm的终端后重新打开，使用pip list，只有pip和setuptools两个的话就说明成功了 二、封装文件 均在上述虚拟环境中操作，即Pycharm重新打开的终端中执行 安装程序依赖的第三方库，否则后续无法使用 安装封装打包pyinstaller库：pip install pyinstaller 执行打包命令：pyinstaller -F -w 待封装的文件 -F：打包为一个完整的.exe文件，没有此参数默认打包为一个目录 -w：隐藏运行程序时会出现的cmd窗口 打包好之后程序会出现在dist目录下，若报错可以在cmd中运行该程序查看错误位置和提示 常见错误1：缺少程序所依赖的第三方库 常见错误2：缺少程序所使用的外部文件，如图片等","content":"<h1 id=\"Python文件打包封装为exe\"><a href=\"#Python文件打包封装为exe\" class=\"headerlink\" title=\"Python文件打包封装为exe\"></a>Python文件打包封装为exe</h1><h2 id=\"一、创建虚拟环境\"><a href=\"#一、创建虚拟环境\" class=\"headerlink\" title=\"一、创建虚拟环境\"></a>一、创建虚拟环境</h2><ul>\n<li><strong>使用虚拟环境封装，会避免封装用不到的库，降低文件大小</strong></li>\n</ul>\n<span id=\"more\"></span>\n\n<ol>\n<li>Pycharm中，文件，新建项目，选择Flask，选择一个位置，在后面添加<code>\\项目名</code>用于创建一个名字为项目名的文件夹，创建</li>\n<li>删掉目录下的默认生成的文件，将要打包的文件粘贴进来</li>\n<li>使用<code>python -m venv venv</code>创建虚拟环境，成功后会生成一个<code>venv</code>的目录，里面是虚拟环境的配置文件</li>\n<li>修改解释器为虚拟环境，Pycharm中，文件，设置，项目:项目名，Python解释器，全部显示，添加，Virtualenv环境，现有环境，检查下目录无误后确定，选择刚创建的解释器，确定，应用，确定</li>\n<li>关闭Pycharm的终端后重新打开，使用<code>pip list</code>，只有<code>pip</code>和<code>setuptools</code>两个的话就说明成功了</li>\n</ol>\n<h2 id=\"二、封装文件\"><a href=\"#二、封装文件\" class=\"headerlink\" title=\"二、封装文件\"></a>二、封装文件</h2><ul>\n<li>均在上述虚拟环境中操作，即Pycharm重新打开的终端中执行</li>\n</ul>\n<ol>\n<li>安装程序依赖的第三方库，否则后续无法使用</li>\n<li>安装封装打包pyinstaller库：<code>pip install pyinstaller</code></li>\n<li>执行打包命令：<code>pyinstaller -F -w 待封装的文件</code><ul>\n<li><code>-F</code>：打包为一个完整的.exe文件，没有此参数默认打包为一个目录</li>\n<li><code>-w</code>：隐藏运行程序时会出现的cmd窗口</li>\n</ul>\n</li>\n<li>打包好之后程序会出现在dist目录下，若报错可以在cmd中运行该程序查看错误位置和提示<ul>\n<li>常见错误1：缺少程序所依赖的第三方库</li>\n<li>常见错误2：缺少程序所使用的外部文件，如图片等</li>\n</ul>\n</li>\n</ol>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"博客搭建-Hexo与GitHub Pages","date":"2017-01-11T11:44:54.000Z","path":"2017/01/11/博客搭建-Hexo与GitHub Pages/","text":"前记近期用Hexo和GitHub Pages搭建了自己的博客，做一个记录，也可以使用Gitee，弄懂原理后过程大同小异 原理逻辑 GitHub是一个基于git分布式版本管理的远程仓库平台，可以随时随地pull和push GitHub提供的Pages功能 可以将仓库中的html、css、js等前端文件直接生成静态页面 可以通过设置特定的仓库名后直接访问，无需自行解决服务器的问题，免费省心 Hexo 可以将写好的文章生成html、css、js等前端文件 可以把生成的前端文件直接推送到github上 主题丰富美观，让博客页面更加高大上 首次建立博客的过程： GitHub建立特定名字的远程仓库 Hexo在本地文件夹生成前端文件 Hexo配置文件中关联GitHub仓库和分支，将前端文件推送到GitHub仓库中 使用GitHub Pages对应网址访问博客 多终端使用和源码备份： Hexo推送前端文件时只依据_config.yml配置文件中设置的远程仓库和分支 远程仓库默认的master分支，用于接收和存放Hexo推送的前端文件 在远程仓库新建一个分支(如blog_hexo_soure_code)，用于接收和存放Hexo的源代码，并设置为仓库的默认分支 以后所有的终端首次使用时，从该仓库clone，直接就是默认分支，也就是存放Hexo的源代码的分支(如blog_hexo_soure_code) 非首次使用时，先git pull更新为当前最新的源代码 本地编辑完后推送完前端文件到master分支后，再将代码git+add&#x2F;commit&#x2F;push，更新远程仓库分支(如blog_hexo_soure_code)的源代码 后续使用博客的过程： 在本地的Hexo文件夹中写文章 Hexo在本地文件夹生成前端文件 Hexo将前端文件推送到GitHub仓库中 git push推送更新后的源代码修改到GitHub仓库中【非多终端使用，可以省略此步】 使用GitHub Pages对应网址访问博客 建立博客的具体步骤一、环境准备 环境安装基本都是境外的源，大概率会很慢，可以在执行前调整为国内的源，陈列如下： 清华大学开源软件镜像站 华为开源镜像站 阿里云开源镜像站 12//比如阿里云开源镜像站，先运行此命令后，然后再使用安装命令npm config set registry https://registry.npm.taobao.org 安装Git for windows，Github必备 git for windows下载入口 安装Node.js，Hexo是基于node的，所以必须安装 node.js下载入口 安装Hexo 安装命令可能会随最新版Hexo变化，建议提前看下Hexo官方入口 12# -g为全局参数npm install -g hexo-cli 二、GitHub中建立博客专用的远程仓库 GitHub官网入口 登录后在GitHub上新建仓库，命名为GitHub用户名.github.io，例如 swibinchter.github.io，用户名记得修改为自己的 到这一步已经可以通过HTTPS方式与GitHub仓库进行通信，但每次都需要输入用户名和密码，推荐使用SSH的方式进行通信 以SSH key方式授予本机修改GitHub的权限 创建本机SSH key，默认在用户主目录(C:&#x2F;User)下会生成.shh目录，包含 id_rsa.pub：公钥，要放到GitHub上用于识别身份 id_rsa：私钥，不能泄露 12ssh-keygen -t rsa -C &quot;youremail@example.com&quot;# 这之后一路回车使用默认值即可 在GitHub中添加SSH key，位置在Account &gt;&gt;&gt;&gt; Settings &gt;&gt;&gt;&gt; SSH Keys &gt;&gt;&gt;&gt; Add SSH Key &gt;&gt;&gt;&gt; 在Key中粘贴id_rsa.pub文件中的内容 三、Hexo在本地文件夹生成前端文件 在本地电脑上新建文件夹，例如Blog 使用Hexo初始化，将其变为一个Hexo文件夹 12hexo init# 对文件夹进行hexo初始化，添加必备文件，本质是从Hexo在GitHub的官方库中clone必备文件到本地 初始化时已经添加一篇名为“hello world”的博文和对应的前端文件，可以直接在本地预览效果【此步可以省略】 123# 启动服务器，浏览器输入http://localhost:4000/中预览博客效果hexo s # 简写hexo server # 完整写法 四、Hexo关联GitHub远程仓库，推送前端文件 安装Hexo的git推送插件hexo-deployer-git 12npm install hexo-deployer-git -S# -S等同于--save，可以将安装信息保存到package.json文件中 打开本地文件夹(Blog)下的_config.yml配置文件，将最后三行修改如下： 12345678# 注意冒号之后有一个空格deploy: type: git repo: git@github.com:你的GitHub用户名/你的GitHub用户名.github.io branch: master# repo为hexo推送前端文件时对应的远程仓库地址，可以直接在GitHub页面复制，此处使用的SSH方式对应地址，比如git@github.com:Swibinchter/Swibinchter.github.io.git# brach为hexo推送前端文件时对应的远程仓库的分支，远程仓库默认只有master主分支 敲黑板，重点来了！Hexo推送前端文件只看上述配置文件里写的仓库和分支，跟GitHub的其他分支或其他远程仓库没有任何关联，理解这点，会容易明白后面讲到的博客源码备份和多设备操作 使用Hexo推送前端文件到GitHub的远程仓库 12hexo d # 简写hexo deploy # 完整写法 五、使用GitHub Pages对应网址访问博客 浏览器输入GitHub Pages对应网址进行查看 1234# 地址格式https://你的GitHub用户名.github.io/# 例如https://swibinchter.github.io 博客的多终端使用和源代码备份 重点再说一次，Hexo推送前端文件只看_config.yml配置文件里设置的仓库和分支，跟GitHub的其他分支或其他远程仓库没有任何关联 一、源代码备份 仅第一次需要，后续添加新终端时可忽略此部分 在GitHub上新建仓库(swibinchter.github.io)时会默认创建master分支，Hexo的_config.yml配置文件中已设置该分支接收前端文件 在GitHub的仓库(swibinchter.github.io)下新建一个分支(如blog_hexo_soure_code)，用于接收和存放Hexo的源代码，并设置为仓库的默认分支，位置在对应仓库的Code &gt;&gt;&gt;&gt; Settings &gt;&gt;&gt;&gt; Branches &gt;&gt;&gt;&gt; Default branch 已经部署Hexo的第一个终端A上clone该仓库，默认分支就是上一步建立的存放Hexo的源代码的分支(如blog_hexo_soure_code) 1234# SSH方式，需要提前将本地仓库与GitHub关联，将SSH公钥添加到GitHub中，A终端已经添加完毕git clone git@github.com:你的github用户名/仓库名.git# 例如git clone git@github.com:Swibinchter/Swibinchter.github.io.git 进入clone的文件夹中，删除掉除了.git外所有的文件，将原博客所在的Hexo文件夹下所有文件复制进来 检查themes文件夹的每个子文件夹，打开显示隐藏文件，删掉所有以.git开头的文件及文件夹，这一步是为了后续能让主题文件夹能成功推送，因为git不能嵌套上传 1比如主题Yilia，需删除.git文件夹、.gitignore、.gitattributes这三项 推送到远程仓库中(默认就是存放Hexo的源代码的分支(如blog_hexo_soure_code))，建议先配置下终端A的用户名，方便跟其他终端区分，这样可以在GitHub上区分每次commit对应的终端 123456789# 设置终端A的用户名git config --global user.name “xxxx(这个终端的用户名)” # 添加文件夹里所有文件修改到暂存区git add .# 提交add的修改到本地分支上git commit -m &quot;第1次推送源代码的说明&quot;# 推送本地分支的修改到远程仓库的对应分支上git push 至此，GitHub上已完成所有部署，master分支用于接收和存放Hexo推送的前端文件，新建并设置为默认的分支(如blog_hexo_soure_code)用于接收和存放Hexo的源代码 二、添加新终端 新终端B安装必要的Git for windows、Node.js、Hexo，详见上文环境准备，配置一下这个终端上的用户名，便于跟其他终端做区分 1git config --global user.name “xxxx(这个终端的用户名)” 终端B上cloneGitHub远程仓库，默认分支就是上一步建立的存放Hexo的源代码的分支(如blog_hexo_soure_code) SSH方式(推荐)，需要提前将本地仓库与GitHub关联，将SSH公钥放到GitHub中，详见上文SSH key设置 123git clone git@github.com:你的github用户名/仓库名.git# 例如git clone git@github.com:Swibinchter/Swibinchter.github.io.git Http方式，可以直接进行，但需要输入GitHub账户密码 1git clone https://github.com/你的github用户名/仓库名.git 在文件夹下安装npm各种插件依赖，需要安装的依赖取决于packages.json 文件，安装插件时的--save&#x2F;-S参数就是把插件信息保存到其中 1234//安装依赖npm install//为防万一，安装hexo-deployer-gitnpm install hexo-deployer-git --save 使用Hexo在本地验证下博客【此步可以省略】 123# 启动服务器，浏览器输入http://localhost:4000/中预览博客效果hexo s # 简写hexo server # 完整写法 至此，终端B的博客已经配置完成，可以正常使用，需要注意的是，多终端使用时，务必要先git pull获取GitHub仓库中最新的源代码后，再编辑文章-hexo g生成前端文件-hexo d推送前端文件，最后需要通过git+add&#x2F;commit&#x2F;push将源代码修改同步到GitHub仓库 日常使用博客的具体步骤 获取GitHub远程仓库对应的分支(blog_hexo_soure_coder)中最新的源代码【非多终端使用，可以省略此步】 1git pull 直接右键新建，使用Hexo创建新文章，新文章文件会出现本地的source文件夹下 12hexo n &quot;文章名字&quot; # 简写hexo new &quot;文章名字&quot; # 完整写法 编辑新文章 使用Hexo在本地预览博客页面效果【此步可以省略】 123# 启动服务器，浏览器输入http://localhost:4000/中预览博客效果hexo s # 简写hexo server # 完整写法 使用Hexo生成前端文件 12hexo g # 简写hexo generate # 完整写法 使用Hexo推送前端文件到GitHub的远程仓库对应的分支(master)中 12hexo d # 简写hexo deploy # 完整写法 推送最新的源代码修改到GitHub的远程仓库对应的分支(blog_hexo_soure_coder)中【非多终端使用，可以省略此步】 123456# 添加Hexo文件夹里所有文件修改到暂存区git add .# 提交add的修改到本地分支上git commit -m &quot;本次修改的简要说明&quot;# 推送本地分支的修改到远程仓库的对应分支上git push 问题汇总Q1： A电脑能正常使用的情况下，B电脑无法hexo d推送到GitHub Pages？A： 检查B电脑是否安装hexo-deployer-git依赖，执行代码npm install hexo-deployer-git --save 检查_config.yml文件中deploy配置信息是否正确，应如下所示： 12345# 注意冒号之后有一个空格 deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git branch: master Q2：安装hexo和hexo-deployer-git巨慢无比?A：国外的资源访问较慢，可以先设置使用国内镜像，然后再使用安装命令npm config set registry https://registry.npm.taobao.org Q3：按照上述步骤建立的博客页面，风格不喜欢?A：默认主题并不好看，Hexo有丰富的主题和设置，参见其他文件更换主题即可 Q4：除了默认主题之外的主题无法完整git push到GitHub上?A：因为这种主题一般是git clone而来的，其本身就是一个关联着主题作者的git仓库，只要删除该主题下的相关git文件即可 Q5：Hexo文件夹里都是弄啥的嘞?A：Hexo 6.3.0主要文件&#x2F;文件夹的说明 主要文件&#x2F;文件夹 说明 是否需要存到GitHub上 .deploy_git hexo g自动生成的 不需要 node_modules Hexo需要的模块，就是一些基础的npm安装模块，比如一些美化插件，在执行npm install的时候会重新生成 不需要 public hexo g命令执行后生成的静态页面文件 不需要 scaffolds 新建文章时的模板 需要 source 用于存放文章的.md文件 需要 themes 主题文件 需要 .gitignore Hexo生成的， 用来忽略一些文件，表示这些类型文件不需要git 需要 _config.yml 全局配置文件 需要 packages.json 记录了Hexo需要的包的信息，之后换电脑终端时npm根据这个信息来安装Hexo环境 需要 参考 Hexo在多台电脑上提交和更新-Kakaluotuo Git教程-廖雪峰（补习git基本知识） 笔记-Git Github 简明教程","content":"<hr>\n<h2 id=\"前记\"><a href=\"#前记\" class=\"headerlink\" title=\"前记\"></a>前记</h2><p>近期用Hexo和GitHub Pages搭建了自己的博客，做一个记录，也可以使用Gitee，弄懂原理后过程大同小异</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"原理逻辑\"><a href=\"#原理逻辑\" class=\"headerlink\" title=\"原理逻辑\"></a>原理逻辑</h2><ul>\n<li><p><strong>GitHub</strong>是一个基于git分布式版本管理的远程仓库平台，可以随时随地pull和push</p>\n</li>\n<li><p>GitHub提供的<strong>Pages</strong>功能</p>\n<ul>\n<li>可以将仓库中的html、css、js等前端文件直接生成静态页面</li>\n<li>可以通过设置特定的仓库名后直接访问，无需自行解决服务器的问题，免费省心</li>\n</ul>\n</li>\n<li><p><strong>Hexo</strong></p>\n<ul>\n<li>可以将写好的文章生成html、css、js等前端文件</li>\n<li>可以把生成的前端文件直接推送到github上</li>\n<li>主题丰富美观，让博客页面更加高大上</li>\n</ul>\n</li>\n<li><p><strong>首次建立博客的过程：</strong></p>\n<ol>\n<li>GitHub建立特定名字的远程仓库</li>\n<li>Hexo在本地文件夹生成前端文件</li>\n<li>Hexo配置文件中关联GitHub仓库和分支，将前端文件推送到GitHub仓库中</li>\n<li>使用GitHub Pages对应网址访问博客</li>\n</ol>\n</li>\n<li><p><strong>多终端使用和源码备份：</strong></p>\n<ol>\n<li><strong>Hexo推送前端文件时只依据<code>_config.yml</code>配置文件中设置的远程仓库和分支</strong></li>\n<li>远程仓库默认的<code>master</code>分支，用于接收和存放Hexo推送的前端文件</li>\n<li>在远程仓库新建一个分支(如<code>blog_hexo_soure_code</code>)，用于接收和存放Hexo的源代码，并设置为仓库的默认分支</li>\n<li>以后所有的终端首次使用时，从该仓库<code>clone</code>，直接就是默认分支，也就是存放Hexo的源代码的分支(如<code>blog_hexo_soure_code</code>)</li>\n<li>非首次使用时，先<code>git pull</code>更新为当前最新的源代码</li>\n<li>本地编辑完后推送完前端文件到<code>master</code>分支后，再将代码<code>git</code>+<code>add</code>&#x2F;<code>commit</code>&#x2F;<code>push</code>，更新远程仓库分支(如<code>blog_hexo_soure_code</code>)的源代码</li>\n</ol>\n</li>\n<li><p><strong>后续使用博客的过程：</strong></p>\n<ol>\n<li>在本地的Hexo文件夹中写文章</li>\n<li>Hexo在本地文件夹生成前端文件</li>\n<li>Hexo将前端文件推送到GitHub仓库中</li>\n<li><code>git push</code>推送更新后的源代码修改到GitHub仓库中【非多终端使用，可以省略此步】</li>\n<li>使用GitHub Pages对应网址访问博客</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"建立博客的具体步骤\"><a href=\"#建立博客的具体步骤\" class=\"headerlink\" title=\"建立博客的具体步骤\"></a>建立博客的具体步骤</h2><h3 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、<a id=\"environment\">环境准备</a></h3><ul>\n<li><p>环境安装基本都是境外的源，大概率会很慢，可以在执行前调整为国内的源，陈列如下：</p>\n<ul>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源软件镜像站</a> </li>\n<li><a href=\"https://mirrors.huaweicloud.com/home\">华为开源镜像站</a></li>\n<li><a href=\"https://developer.aliyun.com/mirror/\">阿里云开源镜像站</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//比如阿里云开源镜像站，先运行此命令后，然后再使用安装命令</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li><p>安装Git for windows，Github必备<br>  <a href=\"https://git-for-windows.github.io/\">git for windows下载入口</a></p>\n</li>\n<li><p>安装Node.js，Hexo是基于node的，所以必须安装<br>  <a href=\"https://nodejs.org/en/download/\">node.js下载入口</a></p>\n</li>\n<li><p>安装Hexo</p>\n<ul>\n<li>安装命令可能会随最新版Hexo变化，建议提前看下<a href=\"https://hexo.io/zh-cn/\">Hexo官方入口</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-g为全局参数</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"二、GitHub中建立博客专用的远程仓库\"><a href=\"#二、GitHub中建立博客专用的远程仓库\" class=\"headerlink\" title=\"二、GitHub中建立博客专用的远程仓库\"></a>二、GitHub中建立博客专用的远程仓库</h3><ul>\n<li><a href=\"https://github.com/\">GitHub官网入口</a></li>\n</ul>\n<ol>\n<li><p>登录后在GitHub上新建仓库，命名为<code>GitHub用户名.github.io</code>，例如 <code>swibinchter.github.io</code>，用户名记得修改为自己的</p>\n</li>\n<li><p>到这一步已经可以通过HTTPS方式与GitHub仓库进行通信，但每次都需要输入用户名和密码，推荐使用SSH的方式进行通信</p>\n</li>\n<li><p>以<a id=\"SSH\">SSH key</a>方式授予本机修改GitHub的权限</p>\n<ul>\n<li><p>创建本机SSH key，默认在用户主目录(C:&#x2F;User)下会生成.shh目录，包含</p>\n<ul>\n<li><code>id_rsa.pub</code>：公钥，要放到GitHub上用于识别身份</li>\n<li><code>id_rsa</code>：私钥，不能泄露</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这之后一路回车使用默认值即可</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在GitHub中添加SSH key，位置在<code>Account</code> &gt;&gt;&gt;&gt; <code>Settings</code> &gt;&gt;&gt;&gt; <code>SSH Keys</code> &gt;&gt;&gt;&gt; <code>Add SSH Key</code> &gt;&gt;&gt;&gt; 在<code>Key</code>中粘贴<code>id_rsa.pub</code>文件中的内容</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、Hexo在本地文件夹生成前端文件\"><a href=\"#三、Hexo在本地文件夹生成前端文件\" class=\"headerlink\" title=\"三、Hexo在本地文件夹生成前端文件\"></a>三、Hexo在本地文件夹生成前端文件</h3><ol>\n<li><p>在本地电脑上新建文件夹，例如<code>Blog</code></p>\n</li>\n<li><p>使用Hexo初始化，将其变为一个Hexo文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对文件夹进行hexo初始化，添加必备文件，本质是从Hexo在GitHub的官方库中<span class=\"built_in\">clone</span>必备文件到本地</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化时已经添加一篇名为“hello world”的博文和对应的前端文件，可以直接在本地预览效果【此步可以省略】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务器，浏览器输入http://localhost:4000/中预览博客效果</span></span><br><span class=\"line\">hexo s\t\t# 简写</span><br><span class=\"line\">hexo server  # 完整写法</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"四、Hexo关联GitHub远程仓库，推送前端文件\"><a href=\"#四、Hexo关联GitHub远程仓库，推送前端文件\" class=\"headerlink\" title=\"四、Hexo关联GitHub远程仓库，推送前端文件\"></a>四、Hexo关联GitHub远程仓库，推送前端文件</h3><ol>\n<li><p>安装Hexo的git推送插件<code>hexo-deployer-git</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git -S</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-S等同于--save，可以将安装信息保存到package.json文件中</span></span><br></pre></td></tr></table></figure></li>\n<li><p>打开本地文件夹(<code>Blog</code>)下的_config.yml配置文件，将最后三行修改如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意冒号之后有一个空格</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">      type: git</span><br><span class=\"line\">      repo: git@github.com:你的GitHub用户名/你的GitHub用户名.github.io</span><br><span class=\"line\">      branch: master</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">repo为hexo推送前端文件时对应的远程仓库地址，可以直接在GitHub页面复制，此处使用的SSH方式对应地址，比如git@github.com:Swibinchter/Swibinchter.github.io.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">brach为hexo推送前端文件时对应的远程仓库的分支，远程仓库默认只有master主分支</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>敲黑板，重点来了！Hexo推送前端文件只看上述配置文件里写的仓库和分支，跟GitHub的其他分支或其他远程仓库没有任何关联</strong>，理解这点，会容易明白后面讲到的博客源码备份和多设备操作</li>\n</ul>\n</li>\n<li><p>使用Hexo推送前端文件到GitHub的远程仓库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d\t\t# 简写</span><br><span class=\"line\">hexo deploy  # 完整写法</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"五、使用GitHub-Pages对应网址访问博客\"><a href=\"#五、使用GitHub-Pages对应网址访问博客\" class=\"headerlink\" title=\"五、使用GitHub Pages对应网址访问博客\"></a>五、使用GitHub Pages对应网址访问博客</h3><ol>\n<li><p>浏览器输入GitHub Pages对应网址进行查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">地址格式</span></span><br><span class=\"line\">https://你的GitHub用户名.github.io/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例如</span></span><br><span class=\"line\">https://swibinchter.github.io</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"博客的多终端使用和源代码备份\"><a href=\"#博客的多终端使用和源代码备份\" class=\"headerlink\" title=\"博客的多终端使用和源代码备份\"></a>博客的多终端使用和源代码备份</h2><ul>\n<li><strong>重点再说一次，Hexo推送前端文件只看<code>_config.yml</code>配置文件里设置的仓库和分支，跟GitHub的其他分支或其他远程仓库没有任何关联</strong></li>\n</ul>\n<h4 id=\"一、源代码备份\"><a href=\"#一、源代码备份\" class=\"headerlink\" title=\"一、源代码备份\"></a>一、源代码备份</h4><ol>\n<li><p>仅第一次需要，后续添加新终端时可忽略此部分</p>\n</li>\n<li><p>在GitHub上新建仓库(<code>swibinchter.github.io</code>)时会默认创建<code>master</code>分支，Hexo的<code>_config.yml</code>配置文件中已设置该分支接收前端文件</p>\n</li>\n<li><p>在GitHub的仓库(swibinchter.github.io)下新建一个分支(如<code>blog_hexo_soure_code</code>)，用于接收和存放Hexo的源代码，并设置为仓库的默认分支，位置在对应仓库的<code>Code</code> &gt;&gt;&gt;&gt; <code>Settings</code> &gt;&gt;&gt;&gt; <code>Branches</code> &gt;&gt;&gt;&gt; <code>Default branch</code></p>\n</li>\n<li><p>已经部署Hexo的第一个终端A上<code>clone</code>该仓库，默认分支就是上一步建立的存放Hexo的源代码的分支(如<code>blog_hexo_soure_code</code>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SSH方式，需要提前将本地仓库与GitHub关联，将SSH公钥添加到GitHub中，A终端已经添加完毕</span></span><br><span class=\"line\">git clone git@github.com:你的github用户名/仓库名.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例如</span></span><br><span class=\"line\">git clone git@github.com:Swibinchter/Swibinchter.github.io.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入<code>clone</code>的文件夹中，删除掉除了<code>.git</code>外所有的文件，将原博客所在的Hexo文件夹下所有文件复制进来</p>\n</li>\n<li><p>检查themes文件夹的每个子文件夹，打开显示隐藏文件，删掉所有以<code>.git</code>开头的文件及文件夹，这一步是为了后续能让主题文件夹能成功推送，因为git不能嵌套上传</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如主题Yilia，需删除.git文件夹、.gitignore、.gitattributes这三项</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送到远程仓库中(默认就是存放Hexo的源代码的分支(如<code>blog_hexo_soure_code</code>))，建议先配置下终端A的用户名，方便跟其他终端区分，这样可以在GitHub上区分每次<code>commit</code>对应的终端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置终端A的用户名</span></span><br><span class=\"line\">git config --global user.name “xxxx(这个终端的用户名)” </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加文件夹里所有文件修改到暂存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交add的修改到本地分支上</span></span><br><span class=\"line\">git commit -m &quot;第1次推送源代码的说明&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">推送本地分支的修改到远程仓库的对应分支上</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>至此，GitHub上已完成所有部署，<code>master</code>分支用于接收和存放Hexo推送的前端文件，新建并设置为默认的分支(如<code>blog_hexo_soure_code</code>)用于接收和存放Hexo的源代码</p>\n</li>\n</ol>\n<h4 id=\"二、添加新终端\"><a href=\"#二、添加新终端\" class=\"headerlink\" title=\"二、添加新终端\"></a>二、添加新终端</h4><ol>\n<li><p>新终端B安装必要的Git for windows、Node.js、Hexo，详见上文<a href=\"#environment\">环境准备</a>，配置一下这个终端上的用户名，便于跟其他终端做区分</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name “xxxx(这个终端的用户名)” </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>终端B上<code>clone</code>GitHub远程仓库，默认分支就是上一步建立的存放Hexo的源代码的分支(如<code>blog_hexo_soure_code</code>)</p>\n<ul>\n<li><p>SSH方式(推荐)，需要提前将本地仓库与GitHub关联，将SSH公钥放到GitHub中，详见上文<a href=\"#SSH\">SSH key设置</a></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:你的github用户名/仓库名.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例如</span></span><br><span class=\"line\">git clone git@github.com:Swibinchter/Swibinchter.github.io.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Http方式，可以直接进行，但需要输入GitHub账户密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/你的github用户名/仓库名.git</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>在文件夹下安装npm各种插件依赖，需要安装的依赖取决于<code>packages.json </code>文件，安装插件时的<code>--save</code>&#x2F;<code>-S</code>参数就是把插件信息保存到其中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装依赖</span><br><span class=\"line\">npm install</span><br><span class=\"line\">//为防万一，安装hexo-deployer-git</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用Hexo在本地验证下博客【此步可以省略】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务器，浏览器输入http://localhost:4000/中预览博客效果</span></span><br><span class=\"line\">hexo s\t\t# 简写</span><br><span class=\"line\">hexo server  # 完整写法</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>至此，终端B的博客已经配置完成，可以正常使用，需要注意的是，<strong>多终端使用时，务必要先<code>git pull</code>获取GitHub仓库中最新的源代码后，再编辑文章-<code>hexo g</code>生成前端文件-<code>hexo d</code>推送前端文件，最后需要通过<code>git</code>+<code>add</code>&#x2F;<code>commit</code>&#x2F;<code>push</code>将源代码修改同步到GitHub仓库</strong></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"日常使用博客的具体步骤\"><a href=\"#日常使用博客的具体步骤\" class=\"headerlink\" title=\"日常使用博客的具体步骤\"></a>日常使用博客的具体步骤</h2><ol>\n<li><p>获取GitHub远程仓库对应的分支(<code>blog_hexo_soure_coder</code>)中最新的源代码【非多终端使用，可以省略此步】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接右键新建，使用Hexo创建新文章，新文章文件会出现本地的source文件夹下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;文章名字&quot;\t # 简写</span><br><span class=\"line\">hexo new &quot;文章名字&quot;   # 完整写法</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑新文章</p>\n</li>\n<li><p>使用Hexo在本地预览博客页面效果【此步可以省略】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务器，浏览器输入http://localhost:4000/中预览博客效果</span></span><br><span class=\"line\">hexo s\t\t# 简写</span><br><span class=\"line\">hexo server  # 完整写法</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用Hexo生成前端文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g\t\t  # 简写</span><br><span class=\"line\">hexo generate # 完整写法</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用Hexo推送前端文件到GitHub的远程仓库对应的分支(<code>master</code>)中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d\t\t# 简写</span><br><span class=\"line\">hexo deploy  # 完整写法</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送最新的源代码修改到GitHub的远程仓库对应的分支(<code>blog_hexo_soure_coder</code>)中【非多终端使用，可以省略此步】</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加Hexo文件夹里所有文件修改到暂存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交add的修改到本地分支上</span></span><br><span class=\"line\">git commit -m &quot;本次修改的简要说明&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">推送本地分支的修改到远程仓库的对应分支上</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><p><strong>Q1</strong>： A电脑能正常使用的情况下，B电脑无法<code>hexo d</code>推送到GitHub Pages？<br><strong>A</strong>：</p>\n<ol>\n<li><p>检查B电脑是否安装<code>hexo-deployer-git</code>依赖，执行代码<code>npm install hexo-deployer-git --save</code></p>\n</li>\n<li><p>检查<code>_config.yml</code>文件中<code>deploy</code>配置信息是否正确，应如下所示：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意冒号之后有一个空格</span></span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">     type: git</span><br><span class=\"line\">     repo: https://github.com/leopardpan/leopardpan.github.io.git</span><br><span class=\"line\">     branch: master</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Q2</strong>：安装<code>hexo</code>和<code>hexo-deployer-git</code>巨慢无比?<br><strong>A</strong>：国外的资源访问较慢，可以先设置使用国内镜像，然后再使用安装命令<br><code>npm config set registry https://registry.npm.taobao.org</code></p>\n<p><strong>Q3</strong>：按照上述步骤建立的博客页面，风格不喜欢?<br><strong>A</strong>：默认主题并不好看，Hexo有丰富的主题和设置，参见其他文件更换主题即可</p>\n<p><strong>Q4</strong>：除了默认主题之外的主题无法完整<code>git push</code>到GitHub上?<br><strong>A</strong>：因为这种主题一般是<code>git clone</code>而来的，其本身就是一个关联着主题作者的git仓库，只要删除该主题下的相关git文件即可</p>\n<p><strong>Q5</strong>：Hexo文件夹里都是弄啥的嘞?<br><strong>A</strong>：Hexo 6.3.0主要文件&#x2F;文件夹的说明</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">主要文件&#x2F;文件夹</th>\n<th align=\"left\">说明</th>\n<th align=\"center\">是否需要存到GitHub上</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.deploy_git</td>\n<td align=\"left\"><code>hexo g</code>自动生成的</td>\n<td align=\"center\">不需要</td>\n</tr>\n<tr>\n<td align=\"left\">node_modules</td>\n<td align=\"left\">Hexo需要的模块，就是一些基础的npm安装模块，比如一些美化插件，在执行<code>npm install</code>的时候会重新生成</td>\n<td align=\"center\">不需要</td>\n</tr>\n<tr>\n<td align=\"left\">public</td>\n<td align=\"left\"><code>hexo g</code>命令执行后生成的静态页面文件</td>\n<td align=\"center\">不需要</td>\n</tr>\n<tr>\n<td align=\"left\">scaffolds</td>\n<td align=\"left\">新建文章时的模板</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"left\">source</td>\n<td align=\"left\">用于存放文章的<code>.md</code>文件</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"left\">themes</td>\n<td align=\"left\">主题文件</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"left\">.gitignore</td>\n<td align=\"left\">Hexo生成的， 用来忽略一些文件，表示这些类型文件不需要git</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"left\">_config.yml</td>\n<td align=\"left\">全局配置文件</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"left\">packages.json</td>\n<td align=\"left\">记录了Hexo需要的包的信息，之后换电脑终端时npm根据这个信息来安装Hexo环境</td>\n<td align=\"center\">需要</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://blog.csdn.net/K1052176873/article/details/122879462\">Hexo在多台电脑上提交和更新-Kakaluotuo</a> </p>\n</li>\n<li><p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程-廖雪峰</a>（补习git基本知识）</p>\n</li>\n<li><p><a href=\"https://swibinchter.github.io/2017/01/11/Git-Github-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/\">笔记-Git Github 简明教程</a></p>\n</li>\n</ul>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客的多终端使用方法","date":"2017-01-11T11:42:23.000Z","path":"2017/01/11/Hexo博客的多终端使用方法/","text":"情景描述搭建完hexo博客难免会遇到这样的情况： 旧电脑淘汰，换新电脑，然而博客还得继续… 家里一台电脑，办公室一台电脑，随身一台笔记本，偶尔去去网咖，换工作又一台办公室的电脑…..多台电脑，然而博客无时无刻都想写.. 解决思路A电脑搭建Hexo博客——A电脑必要源文件push到github仓库中——B电脑配置git、node环境——B电脑从github上clone必要源文件——B电脑安装Hexo Hexo的多终端使用或备份关键在于必要源文件的一致性，将其放到github并接受各个终端的推送，需要时clone到新终端上配置一下hexo即可 我博客的必要源文件如下：scaffolds文件夹——存放模板文件source文件夹——存放md文件themes文件夹——存放主题文件（须删除其中非默认主题文件夹里的.git开头文件夹及文件，否则无法成功&gt;push，详参见：Hexo博客主题文件夹无法完整push及clone）.gitignore文件——git时忽略的内容_config.yml文件——bolg的配置package.json文件——blog的依赖、插件等 注：本文是直接在github上新建仓库将必要源文件放入其中，还可以在GitHubPages对应仓库建立其他分支将其放入其中，会显得统一一些。有兴趣的朋友可以根据本文最下方的参考链接研究一番 具体步骤 在A电脑文件夹Blog中搭建博客，配置主题，部署到GitHubPages等 A电脑通过配置gitignore的内容来避免push非必要源文件(默认的gitignore内容随hexo版本而异)我的gitignore文件内容如下(可以直接复制替换): 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/*~ A电脑检查themes文件夹的每个子文件夹，删掉所有以.git开头的文件及文件夹我的主题是Yilia，需删除.git文件夹、.gitignore、.gitattributes这三项这一步是为了能让主题文件夹能成功push到github上，详参见：Hexo博客主题文件夹无法完整push及clone 在GitHub上新建仓库Blog 本地Blog目录git化并推送到远程Blog（Github）仓库 1234567891011//Blog目录git化git init//添加必要文件到git仓库git add .//提交git commit -m &quot;xxx&quot;//本地Blog仓库关联远程Blog（Github）仓库git remote add origin git@github.com:你的github用户名/Blog.git//建立分支追踪git push -u master//此时所有必要文件已全部push到了GitHub上的Blog仓库中 B电脑安装Git、node环境 B电脑clone远程远程Blog（Github）仓库 12//克隆必要文件git clone add origin git@github.com:你的github用户名/Blog.git 在B电脑Blog目录中配置Hexo 1234//安装hexonpm install hexo//安装依赖npm install 测试 1234567//启动服务器，进入http://localhost:4000/查看，已正常显示hexo s//生成静态文件hexo g//部署到GitHubPageshexo d//打开https://你的github用户名.github.io/查看，已正常显示 打完收工 日常使用 从GitHub上更新必要源文件1git pull 在本地或写文章，或修改配置，或换主题注：需要注意的是换主题时一定要删除其中的以.git开头的文件 将必要源文件更新到GitHub上123git add .git commit -m &quot;xxx&quot;git push 部署到GitHub Pages上12hexo ghexo d 问题汇总Q1： A电脑能正常部署的情况下，B电脑无法hexo d部署到GitHub Pages？A： 检查B电脑是否安装hexo-deployer-git依赖，执行代码npm install hexo-deployer-git --save 检查_config.yml文件中deploy配置信息是否正确，应如下所示：12345//注意冒号之后有一个空格 deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git** branch: master Q2：除了默认主题之外的主题无法完整git push到github上?A：因为这种主题一般是git clone而来的，其本身就是一个关联着主题作者的git仓库，只要删除该主题下的相关git文件即可，具体参见我的另一篇文章： 链接 参考GitHub Pages + Hexo搭建博客 第四节Hexo 换终端&#x2F;换电脑小记 扩展Hexo博客主题文件夹无法完整push及clone","content":"<hr>\n<h2 id=\"情景描述\"><a href=\"#情景描述\" class=\"headerlink\" title=\"情景描述\"></a>情景描述</h2><p>搭建完hexo博客难免会遇到这样的情况：</p>\n<ol>\n<li>旧电脑淘汰，换新电脑，然而博客还得继续…</li>\n<li>家里一台电脑，办公室一台电脑，随身一台笔记本，偶尔去去网咖，换工作又一台办公室的电脑…..多台电脑，然而博客无时无刻都想写..</li>\n</ol>\n<hr>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>A电脑搭建Hexo博客——A电脑必要源文件push到github仓库中——B电脑配置git、node环境——B电脑从github上clone必要源文件——B电脑安装Hexo  </p>\n<span id=\"more\"></span>\n<p>Hexo的多终端使用或备份关键在于必要源文件的一致性，将其放到github并接受各个终端的推送，需要时clone到新终端上配置一下hexo即可</p>\n<blockquote>\n<p>我博客的必要源文件如下：<br>scaffolds文件夹——存放模板文件<br>source文件夹——存放md文件<br>themes文件夹——存放主题文件（须删除其中非默认主题文件夹里的<code>.git</code>开头文件夹及文件，否则无法成功&gt;push，详参见：<a href=\"https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/\">Hexo博客主题文件夹无法完整push及clone</a>）<br>.gitignore文件——git时忽略的内容<br>_config.yml文件——bolg的配置<br>package.json文件——blog的依赖、插件等  </p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3984866-fcb5e2948dca8ace.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"我的必要源文件\">  </p>\n<p><em>注：本文是直接在github上新建仓库将必要源文件放入其中，还可以在GitHubPages对应仓库建立其他分支将其放入其中，会显得统一一些。有兴趣的朋友可以根据本文最下方的参考链接研究一番</em></p>\n<hr>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li><p>在A电脑文件夹Blog中搭建博客，配置主题，部署到GitHubPages等</p>\n</li>\n<li><p>A电脑通过配置gitignore的内容来避免push非必要源文件(默认的gitignore内容随hexo版本而异)<br>我的gitignore文件内容如下(可以直接复制替换):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>A电脑检查themes文件夹的每个子文件夹，删掉所有以<code>.git</code>开头的文件及文件夹<br>我的主题是Yilia，需删除.git文件夹、.gitignore、.gitattributes这三项<br>这一步是为了能让主题文件夹能成功push到github上，详参见：<a href=\"https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/\">Hexo博客主题文件夹无法完整push及clone</a></p>\n</li>\n<li><p>在GitHub上新建仓库Blog</p>\n</li>\n<li><p>本地Blog目录git化并推送到远程Blog（Github）仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Blog目录git化</span><br><span class=\"line\">git init</span><br><span class=\"line\">//添加必要文件到git仓库</span><br><span class=\"line\">git add .</span><br><span class=\"line\">//提交</span><br><span class=\"line\">git commit -m &quot;xxx&quot;</span><br><span class=\"line\">//本地Blog仓库关联远程Blog（Github）仓库</span><br><span class=\"line\">git remote add origin git@github.com:你的github用户名/Blog.git</span><br><span class=\"line\">//建立分支追踪</span><br><span class=\"line\">git push -u master</span><br><span class=\"line\">//此时所有必要文件已全部push到了GitHub上的Blog仓库中</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>B电脑安装Git、node环境</p>\n</li>\n<li><p>B电脑clone远程远程Blog（Github）仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//克隆必要文件</span><br><span class=\"line\">git clone add origin git@github.com:你的github用户名/Blog.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在B电脑Blog目录中配置Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装hexo</span><br><span class=\"line\">npm install hexo</span><br><span class=\"line\">//安装依赖</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动服务器，进入http://localhost:4000/查看，已正常显示</span><br><span class=\"line\">hexo s</span><br><span class=\"line\">//生成静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">//部署到GitHubPages</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">//打开https://你的github用户名.github.io/查看，已正常显示</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打完收工</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ol>\n<li>从GitHub上更新必要源文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></li>\n<li>在本地或写文章，或修改配置，或换主题<br><em>注：需要注意的是换主题时一定要删除其中的以<code>.git</code>开头的文件</em></li>\n<li>将必要源文件更新到GitHub上<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xxx&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></li>\n<li>部署到GitHub Pages上<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><p><strong>Q1</strong>： A电脑能正常部署的情况下，B电脑无法<code>hexo d</code>部署到GitHub Pages？<br><strong>A</strong>：</p>\n<ol>\n<li>检查B电脑是否安装hexo-deployer-git依赖，执行代码<code>npm install hexo-deployer-git --save</code></li>\n<li>检查_config.yml文件中deploy配置信息是否正确，应如下所示：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意冒号之后有一个空格</span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">     type: git</span><br><span class=\"line\">     repo: https://github.com/leopardpan/leopardpan.github.io.git**</span><br><span class=\"line\">     branch: master</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Q2</strong>：除了默认主题之外的主题无法完整<code>git push</code>到github上?<br><strong>A</strong>：因为这种主题一般是<code>git clone</code>而来的，其本身就是一个关联着主题作者的git仓库，只要删除该主题下的相关git文件即可，具体参见我的另一篇文章：</p>\n<hr>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>参考<br><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\">GitHub Pages + Hexo搭建博客 第四节</a><br><a href=\"http://wangmuduo.com/2016/04/02/hexo-change-os/\">Hexo 换终端&#x2F;换电脑小记</a></li>\n<li>扩展<br><a href=\"https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/\">Hexo博客主题文件夹无法完整push及clone</a></li>\n</ul>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客主题文件夹无法完整push及clone","date":"2017-01-11T11:31:35.000Z","path":"2017/01/11/Hexo博客主题文件夹无法完整push及clone/","text":"前记搭建完hexo博客之后，想要把源代码备份或者想在其他终端上使用，其中一种方法便是push到GitHub上，需要时clone下来，然而themes下的主题文件夹除了默认主题比较正常之外，其他主题文件夹push到GitHub上之后却是灰色，将其clone之后发现是空文件夹，辛辛苦苦配置的主题难道需要重新配置一遍！？ 解决思路删除这三项使Yilia变回普通目录——重新提交推送 因为这种主题一般是git clone而来的，其本身就是一个git仓库，只要删除该主题下的相关git文件即可以我使用的hexo-theme-yilia为例，从主题作者litten那里git clone之后THemes&#x2F;Yilia文件夹是这样的 可以看到选中的三项，依次是： .git文件夹：代表此目录本身是一个git仓库 .gitignore：忽略你不想提交到git仓库的内容 .gitattributes：设置非文本文件(如word等)的对比方式 而这个git仓库关联的是主题作者的远程仓库，故而无法提交到本地git仓库中从而无法成功推送到自己的github上 具体步骤注：未提交过主题文件到git仓库的朋友无视前4步，直接从第5步开始 将Yilia文件夹剪切到git仓库之外的目录（剪切可以防止自己的主题配置丢失） 提交从而删除本地git仓库之中的Yilia 12git add .git commit` 推送从而删除远程仓库(gihub)之中的Yilia 1git push 此时登陆github查看themes文件夹，发现之前灰色的Yilia无效文件夹已经没了 将第1步剪切出去的Yilia的文件夹复制回Themes文件夹里 删除.git文件夹、.gitignore、.gitattributes这三项（经过实践发现删除.git文件夹一项即可，但其他两项已然无用，一并删除罢了） 提交从而增加本地git仓库之中的Yilia 12git add .git commit` 推送从而增加远程仓库(gihub)之中的Yilia 1git push 此时登陆github查看themes文件夹，发现Yilia文件夹及其内容已经成功推送 打完收工","content":"<hr>\n<h2 id=\"前记\"><a href=\"#前记\" class=\"headerlink\" title=\"前记\"></a>前记</h2><p>搭建完hexo博客之后，想要把源代码备份或者想在其他终端上使用，其中一种方法便是push到GitHub上，需要时clone下来，然而themes下的主题文件夹除了默认主题比较正常之外，其他主题文件夹push到GitHub上之后却是灰色，将其clone之后发现是空文件夹，辛辛苦苦配置的主题难道需要重新配置一遍！？  </p>\n<hr>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>删除这三项使Yilia变回普通目录——重新提交推送</p>\n<span id=\"more\"></span>\n<p>因为这种主题一般是<code>git clone</code>而来的，其本身就是一个git仓库，只要删除该主题下的相关git文件即可<br>以我使用的hexo-theme-yilia为例，从主题作者litten那里<code>git clone</code>之后THemes&#x2F;Yilia文件夹是这样的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3984866-ba400ddde5a1928b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"`git clone`之后的Themes/Yilia文件夹\"></p>\n<p>可以看到选中的三项，依次是：</p>\n<ul>\n<li>.git文件夹：代表此目录本身是一个git仓库</li>\n<li>.gitignore：忽略你不想提交到git仓库的内容</li>\n<li>.gitattributes：设置非文本文件(如word等)的对比方式</li>\n</ul>\n<p>而这个git仓库关联的是主题作者的远程仓库，故而无法提交到本地git仓库中从而无法成功推送到自己的github上</p>\n<hr>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p><em>注：未提交过主题文件到git仓库的朋友无视前4步，直接从第5步开始</em></p>\n<ol>\n<li><p>将Yilia文件夹剪切到git仓库之外的目录（剪切可以防止自己的主题配置丢失）</p>\n</li>\n<li><p>提交从而删除本地git仓库之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送从而删除远程仓库(gihub)之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>此时登陆github查看themes文件夹，发现之前灰色的Yilia无效文件夹已经没了</p>\n</li>\n<li><p>将第1步剪切出去的Yilia的文件夹复制回Themes文件夹里</p>\n</li>\n<li><p>删除.git文件夹、.gitignore、.gitattributes这三项（经过实践发现删除.git文件夹一项即可，但其他两项已然无用，一并删除罢了）</p>\n</li>\n<li><p>提交从而增加本地git仓库之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送从而增加远程仓库(gihub)之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>此时登陆github查看themes文件夹，发现Yilia文件夹及其内容已经成功推送</p>\n</li>\n<li><p>打完收工</p>\n</li>\n</ol>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Hexo theme","slug":"Hexo-theme","permalink":"http://example.com/tags/Hexo-theme/"}]},{"title":"Git Github 简明教程","date":"2017-01-11T09:05:19.000Z","path":"2017/01/11/Git-Github-简明教程/","text":"本文大量参考于：Git教程-廖雪峰 Git是分布式版本控制系统适用于纯文本文件txt、html等，不适用于word文件、图片、视频等 常用的cmd命令 123456789101112131415161718192021222324//在当前目录下创建新的子文件夹 mkdir &lt;文件夹名&gt; mkdir new //建立名为“new”的文件夹 //进入当前目录下该路径中的文件夹 cd &lt;路径&gt; cd coder\\hexo //进入当前目录下coder文件夹的子文件夹hexo中//显示当前目录 pwd//列出当前目录下的所有项目（文件夹及文件） ls//显示文件内容 cat file cat new.txt //显示new.txt的内容//创建新文件 cat &gt; filename cat &gt; new2.txt //创建new2.txt文件//删除文件 rm filename rm new2.txt //删除new2.txt文件 当前目录git化（需要的话注意用cd命令切换目录） 1git init //当前目录git化 将一个文件放到Git仓库123456789//第一步：添加文件 git add file git add new.txt //添加文件到Git仓库//第二步：提交本次修改并命名此次修改 git commit -m &quot;name of this change&quot; git commit -m &quot;wrote a new txt&quot; //提交此次修改（即添加new.txt）并命名此次修改为“wrote a new txt”//可以添加多个文件后再提交 工作区、暂存区工作区（Working Directory）即电脑中能看到的git化目录版本库（Repository）即 .git，包括： 暂存区（stage或index），用add将修改添加到此处 分支 （第一个分支是master），用commit将修改提交到当前分支 HEAD指针 查询当前仓库状态12345//查询当前仓库状态，是否有文件被修改，该修改是否提交，常用该命令随时掌握工作区状态 git status//查询当前仓库状态与最后一次提交修改时的状态有何具体的不同，文件具体哪一内容被修改 git diff 撤销文件修改1234567//撤销某文件在工作区的全部修改，即某文件回到最后一次提交add或commit的版本 git checkout -- file git checkout -- new.txt //将new.txt回到最后一次提交add或commit的版本//撤销某文件在暂存区的修改并将其放回到工作区（之后如果需要可以再用上面的命令撤销工作区修改） git reset HEAD file git reset HEAD new.txt //将暂存区中new.txt的修改放回到工作区中 删除文件可以理解为git add的相反操作 123//用 git status 查询到某个文件被删之后，可以删除版本库中的文件（在这之后需用git commit提交才行） git rm file // 将之前在工作区中的删除修改放到暂存区中 git rm new.txt 版本回退123456789101112//查询提交日志，能显示所有的提交日志 git log //显示commit id（版本号）、提交人、日期、该次修改的名称 git log --pretty=online //只显示commit id（版本号）、该次修改的名称//查询命令日志，能显示所有操作过的命令 git reflog //显示操作命令后的版本号及命令内容//重置（回退或前进）到某个版本//HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本 git reset --hard 版本 //重置为某个版本 git reset --hard HEAD^^ //回退至上上个版本 git reset --hard df5258b //重置为commit-id为df5258b的版本 创建标签 操作标签标签是指向对应commit的指针 123456789101112131415161718192021222324252627282930313233343536373839//默认在最新提交的commit上创建标签 git tag 标签名 git tag v1.0//在对应版本号(commit id)的commit上创建标签 git tag 标签名 版本号 git tag v1.0 df5258b//创建带有说明的标签 git tag -a 标签名 -m &quot;说明&quot; 版本号 git tag -a v1.0 -m &quot;我是第一版标签的说明&quot; df5258b//查看所有标签(按字母排序) git tag//查看标签信息 git tag 标签名 git tag v1.0//创建的标签值存储在本地，不会自动推送//推送某个标签 git push origin 标签名 git push origin v1.0 //推送v1.0标签到远程仓库//一次性推送所有未推送的本地标签 git push origin --tags//删除本地标签 git tag -d 标签名 git tag -d v1.0 //删除本地的v1.0标签//删除远程标签，先删除本地标签然后推送删除命令 git push origin :refs/tags/标签名 git tag -d v1.0 //删除本地的v1.0标签 git push origin :refs/tags/v1.0 //推送删除远程仓库v1.0标签的命令 GitHub是托管Git仓库的网站创建SSH key密钥对12//创建SSH key，每台电脑的用户(C:/User)主目录下会生成.shh目录，包含id_rsa(私钥，不能泄露)和id_rsa.pub(公钥) ssh-keygen -t rsa -C &quot;youremail@example.com&quot; //这之后一路回车使用默认值即可 添加远程仓库，并关联本地仓库与远程仓库123456789//注册并登陆GitHub//Account setting--SSH Keys//Add SSH Key，在Key中粘贴id_rsa.pub文件中的内容//create repository 创建一个仓库，【不勾选】initialize this repository with a README//在本地仓库目录中运行下面命令，以SHH方式关联本地仓库与远程仓库，其中origin是远程仓库在本地仓库中的昵称，可以改成其他的 git remote add origin git@github.com:用户名/仓库名.git//以上方法采用SHH方式关联(个人认为适用于受信任的私人电脑)，也可以通过https方式(适用于公用的或不被信任的电脑)，不过https方式速度较慢且每次push均须输入GitHub用户名及密码，命令如下 git remote add origin https://github.com/用户名/仓库名.git 以SHH方式关联后，首次push或clone会收到SSH key确认的警告，核对后输入yes即可，以后不再出现 推送本地仓库内容到远程仓库12345//首次推送，需关联本地仓库master分支与远程仓库master分支 git push -u origin master//正常推送，将本地提交的修改推送到远程仓库 git push origin master 远程仓库克隆到本地1234//在GitHub中create repository 创建一个仓库，【勾选】initialize this repository with a README//克隆远程仓库 git clone git@github.com:用户名/仓库名.git //SHH方式 git clone https://github.com/用户名/仓库名.git //https方式 分支管理（日后补充）自定义git（日后补充） 忽略特殊文件 配置别名 搭建Git服务器","content":"<hr>\n<p><em>本文大量参考于：<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程-廖雪峰</a></em></p>\n<hr>\n<h1 id=\"Git是分布式版本控制系统\"><a href=\"#Git是分布式版本控制系统\" class=\"headerlink\" title=\"Git是分布式版本控制系统\"></a>Git是分布式版本控制系统</h1><p>适用于纯文本文件txt、html等，不适用于word文件、图片、视频等</p>\n<h3 id=\"常用的cmd命令\"><a href=\"#常用的cmd命令\" class=\"headerlink\" title=\"常用的cmd命令\"></a>常用的cmd命令</h3><span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在当前目录下创建新的子文件夹</span><br><span class=\"line\">  mkdir &lt;文件夹名&gt;</span><br><span class=\"line\">  mkdir new //建立名为“new”的文件夹  </span><br><span class=\"line\"></span><br><span class=\"line\">//进入当前目录下该路径中的文件夹</span><br><span class=\"line\">  cd &lt;路径&gt;</span><br><span class=\"line\">  cd coder\\hexo //进入当前目录下coder文件夹的子文件夹hexo中</span><br><span class=\"line\"></span><br><span class=\"line\">//显示当前目录</span><br><span class=\"line\">  pwd</span><br><span class=\"line\"></span><br><span class=\"line\">//列出当前目录下的所有项目（文件夹及文件）</span><br><span class=\"line\">  ls</span><br><span class=\"line\"></span><br><span class=\"line\">//显示文件内容</span><br><span class=\"line\">  cat file</span><br><span class=\"line\">  cat new.txt //显示new.txt的内容</span><br><span class=\"line\">//创建新文件</span><br><span class=\"line\">  cat &gt; filename  </span><br><span class=\"line\">  cat &gt; new2.txt //创建new2.txt文件</span><br><span class=\"line\"></span><br><span class=\"line\">//删除文件</span><br><span class=\"line\">  rm filename</span><br><span class=\"line\">  rm new2.txt //删除new2.txt文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当前目录git化\"><a href=\"#当前目录git化\" class=\"headerlink\" title=\"当前目录git化\"></a>当前目录git化</h3><p>（需要的话注意用cd命令切换目录）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init //当前目录git化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将一个文件放到Git仓库\"><a href=\"#将一个文件放到Git仓库\" class=\"headerlink\" title=\"将一个文件放到Git仓库\"></a>将一个文件放到Git仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一步：添加文件</span><br><span class=\"line\">  git add file</span><br><span class=\"line\">  git add new.txt //添加文件到Git仓库</span><br><span class=\"line\"></span><br><span class=\"line\">//第二步：提交本次修改并命名此次修改</span><br><span class=\"line\">  git commit -m &quot;name of this change&quot;</span><br><span class=\"line\">  git commit -m &quot;wrote a new txt&quot; //提交此次修改（即添加new.txt）并命名此次修改为“wrote a new txt”</span><br><span class=\"line\"></span><br><span class=\"line\">//可以添加多个文件后再提交</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工作区、暂存区\"><a href=\"#工作区、暂存区\" class=\"headerlink\" title=\"工作区、暂存区\"></a>工作区、暂存区</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/3984866-9810933040355de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"（此处盗图，原图来自廖雪峰）\"><br>工作区（Working Directory）即电脑中能看到的git化目录<br>版本库（Repository）即 .git，包括：</p>\n<ul>\n<li>暂存区（stage或index），用add将修改添加到此处</li>\n<li>分支 （第一个分支是master），用commit将修改提交到当前分支</li>\n<li>HEAD指针</li>\n</ul>\n<h3 id=\"查询当前仓库状态\"><a href=\"#查询当前仓库状态\" class=\"headerlink\" title=\"查询当前仓库状态\"></a>查询当前仓库状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查询当前仓库状态，是否有文件被修改，该修改是否提交，常用该命令随时掌握工作区状态</span><br><span class=\"line\">  git status</span><br><span class=\"line\"></span><br><span class=\"line\">//查询当前仓库状态与最后一次提交修改时的状态有何具体的不同，文件具体哪一内容被修改</span><br><span class=\"line\">  git diff</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"撤销文件修改\"><a href=\"#撤销文件修改\" class=\"headerlink\" title=\"撤销文件修改\"></a>撤销文件修改</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//撤销某文件在工作区的全部修改，即某文件回到最后一次提交add或commit的版本</span><br><span class=\"line\">  git checkout -- file</span><br><span class=\"line\">  git checkout -- new.txt //将new.txt回到最后一次提交add或commit的版本</span><br><span class=\"line\"></span><br><span class=\"line\">//撤销某文件在暂存区的修改并将其放回到工作区（之后如果需要可以再用上面的命令撤销工作区修改）</span><br><span class=\"line\">  git reset HEAD file</span><br><span class=\"line\">  git reset HEAD new.txt //将暂存区中new.txt的修改放回到工作区中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>可以理解为<code>git add</code>的相反操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用 git status 查询到某个文件被删之后，可以删除版本库中的文件（在这之后需用git commit提交才行）</span><br><span class=\"line\">  git rm file // 将之前在工作区中的删除修改放到暂存区中</span><br><span class=\"line\">  git rm new.txt  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查询提交日志，能显示所有的提交日志</span><br><span class=\"line\">  git log //显示commit id（版本号）、提交人、日期、该次修改的名称</span><br><span class=\"line\">  git log --pretty=online //只显示commit id（版本号）、该次修改的名称</span><br><span class=\"line\"></span><br><span class=\"line\">//查询命令日志，能显示所有操作过的命令</span><br><span class=\"line\">  git reflog //显示操作命令后的版本号及命令内容</span><br><span class=\"line\"></span><br><span class=\"line\">//重置（回退或前进）到某个版本</span><br><span class=\"line\">//HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本</span><br><span class=\"line\">  git reset --hard 版本 //重置为某个版本</span><br><span class=\"line\">  git reset --hard HEAD^^ //回退至上上个版本</span><br><span class=\"line\">  git reset --hard  df5258b //重置为commit-id为df5258b的版本</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"创建标签-操作标签\"><a href=\"#创建标签-操作标签\" class=\"headerlink\" title=\"创建标签 操作标签\"></a>创建标签 操作标签</h3><p>标签是指向对应commit的指针</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认在最新提交的commit上创建标签</span><br><span class=\"line\">  git tag 标签名</span><br><span class=\"line\">  git tag v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">//在对应版本号(commit id)的commit上创建标签</span><br><span class=\"line\">  git tag 标签名 版本号</span><br><span class=\"line\">  git tag v1.0 df5258b</span><br><span class=\"line\"></span><br><span class=\"line\">//创建带有说明的标签</span><br><span class=\"line\">  git tag -a 标签名 -m &quot;说明&quot; 版本号</span><br><span class=\"line\">  git tag -a v1.0 -m &quot;我是第一版标签的说明&quot; df5258b</span><br><span class=\"line\"></span><br><span class=\"line\">//查看所有标签(按字母排序)</span><br><span class=\"line\">  git tag</span><br><span class=\"line\"></span><br><span class=\"line\">//查看标签信息</span><br><span class=\"line\">  git tag 标签名</span><br><span class=\"line\">  git tag v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">//创建的标签值存储在本地，不会自动推送</span><br><span class=\"line\"></span><br><span class=\"line\">//推送某个标签</span><br><span class=\"line\">  git push origin 标签名</span><br><span class=\"line\">  git push origin v1.0 //推送v1.0标签到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">//一次性推送所有未推送的本地标签</span><br><span class=\"line\">  git push origin --tags</span><br><span class=\"line\"></span><br><span class=\"line\">//删除本地标签</span><br><span class=\"line\">  git tag -d 标签名</span><br><span class=\"line\">  git tag -d v1.0 //删除本地的v1.0标签</span><br><span class=\"line\"></span><br><span class=\"line\">//删除远程标签，先删除本地标签然后推送删除命令</span><br><span class=\"line\">  git push origin :refs/tags/标签名</span><br><span class=\"line\">  git tag -d v1.0 //删除本地的v1.0标签</span><br><span class=\"line\">  git push origin :refs/tags/v1.0 //推送删除远程仓库v1.0标签的命令</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"GitHub是托管Git仓库的网站\"><a href=\"#GitHub是托管Git仓库的网站\" class=\"headerlink\" title=\"GitHub是托管Git仓库的网站\"></a>GitHub是托管Git仓库的网站</h1><h3 id=\"创建SSH-key密钥对\"><a href=\"#创建SSH-key密钥对\" class=\"headerlink\" title=\"创建SSH key密钥对\"></a>创建SSH key密钥对</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建SSH key，每台电脑的用户(C:/User)主目录下会生成.shh目录，包含id_rsa(私钥，不能泄露)和id_rsa.pub(公钥)</span><br><span class=\"line\">  ssh-keygen -t rsa -C &quot;youremail@example.com&quot; //这之后一路回车使用默认值即可</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加远程仓库，并关联本地仓库与远程仓库\"><a href=\"#添加远程仓库，并关联本地仓库与远程仓库\" class=\"headerlink\" title=\"添加远程仓库，并关联本地仓库与远程仓库\"></a>添加远程仓库，并关联本地仓库与远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注册并登陆GitHub</span><br><span class=\"line\">//Account setting--SSH Keys</span><br><span class=\"line\">//Add SSH Key，在Key中粘贴id_rsa.pub文件中的内容</span><br><span class=\"line\">//create repository 创建一个仓库，【不勾选】initialize this repository with a README</span><br><span class=\"line\">//在本地仓库目录中运行下面命令，以SHH方式关联本地仓库与远程仓库，其中origin是远程仓库在本地仓库中的昵称，可以改成其他的</span><br><span class=\"line\">  git remote add origin git@github.com:用户名/仓库名.git</span><br><span class=\"line\"></span><br><span class=\"line\">//以上方法采用SHH方式关联(个人认为适用于受信任的私人电脑)，也可以通过https方式(适用于公用的或不被信任的电脑)，不过https方式速度较慢且每次push均须输入GitHub用户名及密码，命令如下</span><br><span class=\"line\">  git remote add origin https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure>\n<p>以SHH方式关联后，首次push或clone会收到SSH key确认的警告，核对后输入yes即可，以后不再出现</p>\n<h3 id=\"推送本地仓库内容到远程仓库\"><a href=\"#推送本地仓库内容到远程仓库\" class=\"headerlink\" title=\"推送本地仓库内容到远程仓库\"></a>推送本地仓库内容到远程仓库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//首次推送，需关联本地仓库master分支与远程仓库master分支</span><br><span class=\"line\">  git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\">//正常推送，将本地提交的修改推送到远程仓库</span><br><span class=\"line\">  git push origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程仓库克隆到本地\"><a href=\"#远程仓库克隆到本地\" class=\"headerlink\" title=\"远程仓库克隆到本地\"></a>远程仓库克隆到本地</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在GitHub中create repository 创建一个仓库，【勾选】initialize this repository with a README</span><br><span class=\"line\">//克隆远程仓库</span><br><span class=\"line\">  git clone git@github.com:用户名/仓库名.git //SHH方式</span><br><span class=\"line\">  git clone https://github.com/用户名/仓库名.git //https方式</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理（日后补充）\"><a href=\"#分支管理（日后补充）\" class=\"headerlink\" title=\"分支管理（日后补充）\"></a>分支管理（日后补充）</h3><h3 id=\"自定义git（日后补充）\"><a href=\"#自定义git（日后补充）\" class=\"headerlink\" title=\"自定义git（日后补充）\"></a>自定义git（日后补充）</h3><ul>\n<li>忽略特殊文件</li>\n<li>配置别名</li>\n<li>搭建Git服务器</li>\n</ul>\n<hr>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"}]},{"title":"Hello World","date":"2017-01-11T08:44:54.000Z","path":"2017/01/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}]