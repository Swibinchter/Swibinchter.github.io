[{"title":"Python文件打包封装为exe","date":"2022-10-31T16:23:35.000Z","path":"2022/11/01/Python文件打包封装为exe/","text":"Python文件打包封装为exe一、创建虚拟环境 使用虚拟环境封装，会避免封装用不到的库，降低文件大小 Pycharm中，文件，新建项目，选择Flask，选择一个位置，在后面添加\\项目名用于创建一个名字为项目名的文件夹，创建 删掉目录下的默认生成的文件，将要打包的文件粘贴进来 使用python -m venv venv创建虚拟环境，成功后会生成一个venv的目录，里面是虚拟环境的配置文件 修改解释器为虚拟环境，Pycharm中，文件，设置，项目:项目名，Python解释器，全部显示，添加，Virtualenv环境，现有环境，检查下目录无误后确定，选择刚创建的解释器，确定，应用，确定 关闭Pycharm的终端后重新打开，使用pip list，只有pip和setuptools两个的话就说明成功了 二、封装文件 均在上述虚拟环境中操作，即Pycharm重新打开的终端中执行 安装程序依赖的第三方库，否则后续无法使用 安装封装打包pyinstaller库：pip install pyinstaller 执行打包命令：pyinstaller -F -w 待封装的文件 -F：打包为一个完整的.exe文件，没有此参数默认打包为一个目录 -w：隐藏运行程序时会出现的cmd窗口 打包好之后程序会出现在dist目录下，若报错可以在cmd中运行该程序查看错误位置和提示 常见错误1：缺少程序所依赖的第三方库 常见错误2：缺少程序所使用的外部文件，如图片等","content":"<h1 id=\"Python文件打包封装为exe\"><a href=\"#Python文件打包封装为exe\" class=\"headerlink\" title=\"Python文件打包封装为exe\"></a>Python文件打包封装为exe</h1><h2 id=\"一、创建虚拟环境\"><a href=\"#一、创建虚拟环境\" class=\"headerlink\" title=\"一、创建虚拟环境\"></a>一、创建虚拟环境</h2><ul>\n<li><strong>使用虚拟环境封装，会避免封装用不到的库，降低文件大小</strong></li>\n</ul>\n<ol>\n<li>Pycharm中，文件，新建项目，选择Flask，选择一个位置，在后面添加<code>\\项目名</code>用于创建一个名字为项目名的文件夹，创建</li>\n<li>删掉目录下的默认生成的文件，将要打包的文件粘贴进来</li>\n<li>使用<code>python -m venv venv</code>创建虚拟环境，成功后会生成一个<code>venv</code>的目录，里面是虚拟环境的配置文件</li>\n<li>修改解释器为虚拟环境，Pycharm中，文件，设置，项目:项目名，Python解释器，全部显示，添加，Virtualenv环境，现有环境，检查下目录无误后确定，选择刚创建的解释器，确定，应用，确定</li>\n<li>关闭Pycharm的终端后重新打开，使用<code>pip list</code>，只有<code>pip</code>和<code>setuptools</code>两个的话就说明成功了</li>\n</ol>\n<h2 id=\"二、封装文件\"><a href=\"#二、封装文件\" class=\"headerlink\" title=\"二、封装文件\"></a>二、封装文件</h2><ul>\n<li>均在上述虚拟环境中操作，即Pycharm重新打开的终端中执行</li>\n</ul>\n<ol>\n<li>安装程序依赖的第三方库，否则后续无法使用</li>\n<li>安装封装打包pyinstaller库：<code>pip install pyinstaller</code></li>\n<li>执行打包命令：<code>pyinstaller -F -w 待封装的文件</code><ul>\n<li><code>-F</code>：打包为一个完整的.exe文件，没有此参数默认打包为一个目录</li>\n<li><code>-w</code>：隐藏运行程序时会出现的cmd窗口</li>\n</ul>\n</li>\n<li>打包好之后程序会出现在dist目录下，若报错可以在cmd中运行该程序查看错误位置和提示<ul>\n<li>常见错误1：缺少程序所依赖的第三方库</li>\n<li>常见错误2：缺少程序所使用的外部文件，如图片等</li>\n</ul>\n</li>\n</ol>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"photo","date":"2017-01-12T11:07:38.000Z","path":"2017/01/12/photo/","text":"我是标题本文是为了测试图片安装了hexo-asset-image插件下面是测试图片，运用常规Markdown语法","content":"<h1 id=\"我是标题\"><a href=\"#我是标题\" class=\"headerlink\" title=\"我是标题\"></a>我是标题</h1><h2 id=\"本文是为了测试图片\"><a href=\"#本文是为了测试图片\" class=\"headerlink\" title=\"本文是为了测试图片\"></a>本文是为了测试图片</h2><p>安装了hexo-asset-image插件<br>下面是测试图片，运用常规Markdown语法<br><img src=\"/photo/1.png\" alt=\"pic1\"></p>\n","categories":[{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"Hexo与GitHub Pages搭建博客","date":"2017-01-11T11:44:54.000Z","path":"2017/01/11/Hexo与GitHub-Pages搭建博客/","text":"近期用Hexo和GitHub Pages搭建了自己的博客，走了一些弯路，为防止自己以后忘记，现记录下来 搭建前深情地补习了一下git知识并做了笔记Git教程-廖雪峰笔记-Git Github 简明教程 具体步骤 安装git for windowsgit for windows下载入口 安装node.jsnode.js下载入口 安装Hexo 12// -g为全局参数npm install -g hexo-cli 创建Hexo文件夹Blog并初始化 12//hexo init 文件夹名hexo init Blog 至此本地的Hexo博客已经搞定，可以使用下面的命令 1234//创建新文章hexo new &quot;文章名字&quot; //可简写为 hexo n &quot;文章名字&quot;//启动服务器在http://localhost:4000/中预览博客效果hexo server //可简写为 hexo s 以SSH key方式授予本机修改GitHub的权限 12345//创建本机SSH key，每台电脑的用户(C:/User)主目录下会生成.shh目录，包含id_rsa(私钥，不能泄露)和id_rsa.pub(公钥) ssh-keygen -t rsa -C &quot;youremail@example.com&quot; //这之后一路回车使用默认值即可//注册并登陆GitHub//Account setting--SSH Keys//Add SSH Key，在Key中粘贴id_rsa.pub文件中的内容 关联GitHub Pages 在GitHub上新建仓库，命名为你的GitHub用户名.github.io，例如 jack.github.io 打开Blog目录下的_config.yml文件，将最后三行修改如下：123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:你的GitHub用户名/你的GitHub用户名.github.io branch: master 注：此处是以SSH方式关联，也可以不使用SSH key而用Https方式，不过每次链接均须输入GitHub账户及密码，虽然安全但不方便。 安装hexo-deployer-git插件12//-S等同于--save，可以将安装信息保存到package.json文件中npm install hexo-deployer-git -S 将本地Hexo博客内容部署(deploy)到GitHub上 1234//生成静态文件hexo generate //可简写为 hexo g//部署到GitHubhexo deploy //可简写为 hexo d 在GitHub Pages上查看，地址为：https:&#x2F;&#x2F;你的GitHub用户名.github.io&#x2F;例如 https://jack.github.io 打完收工 日常操作创建新文章 1hexo n 文章编辑完成后在本地查看 1hexo s 部署到GitHub Pages上 12hexo ghexo d","content":"<hr>\n<p>近期用Hexo和GitHub Pages搭建了自己的博客，走了一些弯路，为防止自己以后忘记，现记录下来</p>\n<p>搭建前深情地补习了一下git知识并做了笔记<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程-廖雪峰</a><br><a href=\"https://swibinchter.github.io/2017/01/11/Git-Github-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/\">笔记-Git Github 简明教程</a></p>\n<hr>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><span id=\"more\"></span>\n<ol>\n<li><p>安装git for windows<br><a href=\"https://git-for-windows.github.io/\">git for windows下载入口</a></p>\n</li>\n<li><p>安装node.js<br><a href=\"https://nodejs.org/en/download/\">node.js下载入口</a></p>\n</li>\n<li><p>安装Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -g为全局参数</span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建Hexo文件夹Blog并初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//hexo init 文件夹名</span><br><span class=\"line\">hexo init Blog</span><br></pre></td></tr></table></figure>\n<p>至此本地的Hexo博客已经搞定，可以使用下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建新文章</span><br><span class=\"line\">hexo new &quot;文章名字&quot; //可简写为 hexo n &quot;文章名字&quot;</span><br><span class=\"line\">//启动服务器在http://localhost:4000/中预览博客效果</span><br><span class=\"line\">hexo server //可简写为 hexo s</span><br></pre></td></tr></table></figure></li>\n<li><p>以SSH key方式授予本机修改GitHub的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建本机SSH key，每台电脑的用户(C:/User)主目录下会生成.shh目录，包含id_rsa(私钥，不能泄露)和id_rsa.pub(公钥)</span><br><span class=\"line\">  ssh-keygen -t rsa -C &quot;youremail@example.com&quot; //这之后一路回车使用默认值即可</span><br><span class=\"line\">//注册并登陆GitHub</span><br><span class=\"line\">//Account setting--SSH Keys</span><br><span class=\"line\">//Add SSH Key，在Key中粘贴id_rsa.pub文件中的内容</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联GitHub Pages</p>\n</li>\n</ol>\n<ul>\n<li>在GitHub上新建仓库，命名为你的GitHub用户名.github.io，例如 jack.github.io</li>\n<li>打开Blog目录下的_config.yml文件，将最后三行修改如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">      type: git</span><br><span class=\"line\">      repo: git@github.com:你的GitHub用户名/你的GitHub用户名.github.io</span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<em>注：此处是以SSH方式关联，也可以不使用SSH key而用Https方式，不过每次链接均须输入GitHub账户及密码，虽然安全但不方便。</em></li>\n<li>安装hexo-deployer-git插件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-S等同于--save，可以将安装信息保存到package.json文件中</span><br><span class=\"line\">npm install hexo-deployer-git -S</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"7\">\n<li><p>将本地Hexo博客内容部署(deploy)到GitHub上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//生成静态文件</span><br><span class=\"line\">hexo generate //可简写为 hexo g</span><br><span class=\"line\">//部署到GitHub</span><br><span class=\"line\">hexo deploy //可简写为 hexo d</span><br></pre></td></tr></table></figure></li>\n<li><p>在GitHub Pages上查看，地址为：<br>https:&#x2F;&#x2F;你的GitHub用户名.github.io&#x2F;<br>例如 <a href=\"https://jack.github.io/\">https://jack.github.io</a></p>\n</li>\n<li><p>打完收工</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h2><p>创建新文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n</span><br></pre></td></tr></table></figure>\n<p>文章编辑完成后在本地查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>部署到GitHub Pages上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<hr>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客的多终端使用方法","date":"2017-01-11T11:42:23.000Z","path":"2017/01/11/Hexo博客的多终端使用方法/","text":"情景描述搭建完hexo博客难免会遇到这样的情况： 旧电脑淘汰，换新电脑，然而博客还得继续… 家里一台电脑，办公室一台电脑，随身一台笔记本，偶尔去去网咖，换工作又一台办公室的电脑…..多台电脑，然而博客无时无刻都想写.. 解决思路A电脑搭建Hexo博客——A电脑必要源文件push到github仓库中——B电脑配置git、node环境——B电脑从github上clone必要源文件——B电脑安装Hexo Hexo的多终端使用或备份关键在于必要源文件的一致性，将其放到github并接受各个终端的推送，需要时clone到新终端上配置一下hexo即可 我博客的必要源文件如下：scaffolds文件夹——存放模板文件source文件夹——存放md文件themes文件夹——存放主题文件（须删除其中非默认主题文件夹里的.git开头文件夹及文件，否则无法成功&gt;push，详参见：Hexo博客主题文件夹无法完整push及clone）.gitignore文件——git时忽略的内容_config.yml文件——bolg的配置package.json文件——blog的依赖、插件等 注：本文是直接在github上新建仓库将必要源文件放入其中，还可以在GitHubPages对应仓库建立其他分支将其放入其中，会显得统一一些。有兴趣的朋友可以根据本文最下方的参考链接研究一番 具体步骤 在A电脑文件夹Blog中搭建博客，配置主题，部署到GitHubPages等 A电脑通过配置gitignore的内容来避免push非必要源文件(默认的gitignore内容随hexo版本而异)我的gitignore文件内容如下(可以直接复制替换): 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/*~ A电脑检查themes文件夹的每个子文件夹，删掉所有以.git开头的文件及文件夹我的主题是Yilia，需删除.git文件夹、.gitignore、.gitattributes这三项这一步是为了能让主题文件夹能成功push到github上，详参见：Hexo博客主题文件夹无法完整push及clone 在GitHub上新建仓库Blog 本地Blog目录git化并推送到远程Blog（Github）仓库 1234567891011//Blog目录git化git init//添加必要文件到git仓库git add .//提交git commit -m &quot;xxx&quot;//本地Blog仓库关联远程Blog（Github）仓库git remote add origin git@github.com:你的github用户名/Blog.git//建立分支追踪git push -u master//此时所有必要文件已全部push到了GitHub上的Blog仓库中 B电脑安装Git、node环境 B电脑clone远程远程Blog（Github）仓库 12//克隆必要文件git clone add origin git@github.com:你的github用户名/Blog.git 在B电脑Blog目录中配置Hexo 1234//安装hexonpm install hexo//安装依赖npm install 测试 1234567//启动服务器，进入http://localhost:4000/查看，已正常显示hexo s//生成静态文件hexo g//部署到GitHubPageshexo d//打开https://你的github用户名.github.io/查看，已正常显示 打完收工 日常使用 从GitHub上更新必要源文件1git pull 在本地或写文章，或修改配置，或换主题注：需要注意的是换主题时一定要删除其中的以.git开头的文件 将必要源文件更新到GitHub上123git add .git commit -m &quot;xxx&quot;git push 部署到GitHub Pages上12hexo ghexo d 问题汇总Q1： A电脑能正常部署的情况下，B电脑无法hexo d部署到GitHub Pages？A： 检查B电脑是否安装hexo-deployer-git依赖，执行代码npm install hexo-deployer-git --save 检查_config.yml文件中deploy配置信息是否正确，应如下所示：12345//注意冒号之后有一个空格 deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git** branch: master Q2：除了默认主题之外的主题无法完整git push到github上?A：因为这种主题一般是git clone而来的，其本身就是一个关联着主题作者的git仓库，只要删除该主题下的相关git文件即可，具体参见我的另一篇文章： 链接 参考GitHub Pages + Hexo搭建博客 第四节Hexo 换终端&#x2F;换电脑小记 扩展Hexo博客主题文件夹无法完整push及clone","content":"<hr>\n<h2 id=\"情景描述\"><a href=\"#情景描述\" class=\"headerlink\" title=\"情景描述\"></a>情景描述</h2><p>搭建完hexo博客难免会遇到这样的情况：</p>\n<ol>\n<li>旧电脑淘汰，换新电脑，然而博客还得继续…</li>\n<li>家里一台电脑，办公室一台电脑，随身一台笔记本，偶尔去去网咖，换工作又一台办公室的电脑…..多台电脑，然而博客无时无刻都想写..</li>\n</ol>\n<hr>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>A电脑搭建Hexo博客——A电脑必要源文件push到github仓库中——B电脑配置git、node环境——B电脑从github上clone必要源文件——B电脑安装Hexo  </p>\n<span id=\"more\"></span>\n<p>Hexo的多终端使用或备份关键在于必要源文件的一致性，将其放到github并接受各个终端的推送，需要时clone到新终端上配置一下hexo即可</p>\n<blockquote>\n<p>我博客的必要源文件如下：<br>scaffolds文件夹——存放模板文件<br>source文件夹——存放md文件<br>themes文件夹——存放主题文件（须删除其中非默认主题文件夹里的<code>.git</code>开头文件夹及文件，否则无法成功&gt;push，详参见：<a href=\"https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/\">Hexo博客主题文件夹无法完整push及clone</a>）<br>.gitignore文件——git时忽略的内容<br>_config.yml文件——bolg的配置<br>package.json文件——blog的依赖、插件等  </p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3984866-fcb5e2948dca8ace.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"我的必要源文件\">  </p>\n<p><em>注：本文是直接在github上新建仓库将必要源文件放入其中，还可以在GitHubPages对应仓库建立其他分支将其放入其中，会显得统一一些。有兴趣的朋友可以根据本文最下方的参考链接研究一番</em></p>\n<hr>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li><p>在A电脑文件夹Blog中搭建博客，配置主题，部署到GitHubPages等</p>\n</li>\n<li><p>A电脑通过配置gitignore的内容来避免push非必要源文件(默认的gitignore内容随hexo版本而异)<br>我的gitignore文件内容如下(可以直接复制替换):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>A电脑检查themes文件夹的每个子文件夹，删掉所有以<code>.git</code>开头的文件及文件夹<br>我的主题是Yilia，需删除.git文件夹、.gitignore、.gitattributes这三项<br>这一步是为了能让主题文件夹能成功push到github上，详参见：<a href=\"https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/\">Hexo博客主题文件夹无法完整push及clone</a></p>\n</li>\n<li><p>在GitHub上新建仓库Blog</p>\n</li>\n<li><p>本地Blog目录git化并推送到远程Blog（Github）仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Blog目录git化</span><br><span class=\"line\">git init</span><br><span class=\"line\">//添加必要文件到git仓库</span><br><span class=\"line\">git add .</span><br><span class=\"line\">//提交</span><br><span class=\"line\">git commit -m &quot;xxx&quot;</span><br><span class=\"line\">//本地Blog仓库关联远程Blog（Github）仓库</span><br><span class=\"line\">git remote add origin git@github.com:你的github用户名/Blog.git</span><br><span class=\"line\">//建立分支追踪</span><br><span class=\"line\">git push -u master</span><br><span class=\"line\">//此时所有必要文件已全部push到了GitHub上的Blog仓库中</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>B电脑安装Git、node环境</p>\n</li>\n<li><p>B电脑clone远程远程Blog（Github）仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//克隆必要文件</span><br><span class=\"line\">git clone add origin git@github.com:你的github用户名/Blog.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在B电脑Blog目录中配置Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装hexo</span><br><span class=\"line\">npm install hexo</span><br><span class=\"line\">//安装依赖</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动服务器，进入http://localhost:4000/查看，已正常显示</span><br><span class=\"line\">hexo s</span><br><span class=\"line\">//生成静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">//部署到GitHubPages</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">//打开https://你的github用户名.github.io/查看，已正常显示</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打完收工</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ol>\n<li>从GitHub上更新必要源文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></li>\n<li>在本地或写文章，或修改配置，或换主题<br><em>注：需要注意的是换主题时一定要删除其中的以<code>.git</code>开头的文件</em></li>\n<li>将必要源文件更新到GitHub上<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xxx&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></li>\n<li>部署到GitHub Pages上<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><p><strong>Q1</strong>： A电脑能正常部署的情况下，B电脑无法<code>hexo d</code>部署到GitHub Pages？<br><strong>A</strong>：</p>\n<ol>\n<li>检查B电脑是否安装hexo-deployer-git依赖，执行代码<code>npm install hexo-deployer-git --save</code></li>\n<li>检查_config.yml文件中deploy配置信息是否正确，应如下所示：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意冒号之后有一个空格</span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">     type: git</span><br><span class=\"line\">     repo: https://github.com/leopardpan/leopardpan.github.io.git**</span><br><span class=\"line\">     branch: master</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Q2</strong>：除了默认主题之外的主题无法完整<code>git push</code>到github上?<br><strong>A</strong>：因为这种主题一般是<code>git clone</code>而来的，其本身就是一个关联着主题作者的git仓库，只要删除该主题下的相关git文件即可，具体参见我的另一篇文章：</p>\n<hr>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>参考<br><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\">GitHub Pages + Hexo搭建博客 第四节</a><br><a href=\"http://wangmuduo.com/2016/04/02/hexo-change-os/\">Hexo 换终端&#x2F;换电脑小记</a></li>\n<li>扩展<br><a href=\"https://swibinchter.github.io/2017/01/11/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E5%AE%8C%E6%95%B4push%E5%8F%8Aclone/\">Hexo博客主题文件夹无法完整push及clone</a></li>\n</ul>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客主题文件夹无法完整push及clone","date":"2017-01-11T11:31:35.000Z","path":"2017/01/11/Hexo博客主题文件夹无法完整push及clone/","text":"情景描述搭建完hexo博客之后，想要把源代码备份或者想在其他终端上使用，其中一种方法便是push到GitHub上，需要时clone下来，然而themes下的主题文件夹除了默认主题比较正常之外，其他主题文件夹push到GitHub上之后却是灰色，将其clone之后发现是空文件夹，辛辛苦苦配置的主题难道需要重新配置一遍！？ 解决思路删除这三项使Yilia变回普通目录——重新提交推送 因为这种主题一般是git clone而来的，其本身就是一个git仓库，只要删除该主题下的相关git文件即可以我使用的hexo-theme-yilia为例，从主题作者litten那里git clone之后THemes&#x2F;Yilia文件夹是这样的 可以看到选中的三项，依次是： .git文件夹：代表此目录本身是一个git仓库 .gitignore：忽略你不想提交到git仓库的内容 .gitattributes：设置非文本文件(如word等)的对比方式 而这个git仓库关联的是主题作者的远程仓库，故而无法提交到本地git仓库中从而无法成功推送到自己的github上 具体步骤：注：未提交过主题文件到git仓库的朋友无视前4步，直接从第5步开始 将Yilia文件夹剪切到git仓库之外的目录（剪切可以防止自己的主题配置丢失） 提交从而删除本地git仓库之中的Yilia 12git add .git commit` 推送从而删除远程仓库(gihub)之中的Yilia 1git push 此时登陆github查看themes文件夹，发现之前灰色的Yilia无效文件夹已经没了 将第1步剪切出去的Yilia的文件夹复制回Themes文件夹里 删除.git文件夹、.gitignore、.gitattributes这三项（经过实践发现删除.git文件夹一项即可，但其他两项已然无用，一并删除罢了） 提交从而增加本地git仓库之中的Yilia 12git add .git commit` 推送从而增加远程仓库(gihub)之中的Yilia 1git push 此时登陆github查看themes文件夹，发现Yilia文件夹及其内容已经成功推送 打完收工","content":"<hr>\n<h2 id=\"情景描述\"><a href=\"#情景描述\" class=\"headerlink\" title=\"情景描述\"></a>情景描述</h2><p>搭建完hexo博客之后，想要把源代码备份或者想在其他终端上使用，其中一种方法便是push到GitHub上，需要时clone下来，然而themes下的主题文件夹除了默认主题比较正常之外，其他主题文件夹push到GitHub上之后却是灰色，将其clone之后发现是空文件夹，辛辛苦苦配置的主题难道需要重新配置一遍！？  </p>\n<hr>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>删除这三项使Yilia变回普通目录——重新提交推送</p>\n<span id=\"more\"></span>\n<p>因为这种主题一般是<code>git clone</code>而来的，其本身就是一个git仓库，只要删除该主题下的相关git文件即可<br>以我使用的hexo-theme-yilia为例，从主题作者litten那里<code>git clone</code>之后THemes&#x2F;Yilia文件夹是这样的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3984866-ba400ddde5a1928b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"`git clone`之后的Themes/Yilia文件夹\"></p>\n<p>可以看到选中的三项，依次是：</p>\n<ul>\n<li>.git文件夹：代表此目录本身是一个git仓库</li>\n<li>.gitignore：忽略你不想提交到git仓库的内容</li>\n<li>.gitattributes：设置非文本文件(如word等)的对比方式</li>\n</ul>\n<p>而这个git仓库关联的是主题作者的远程仓库，故而无法提交到本地git仓库中从而无法成功推送到自己的github上</p>\n<hr>\n<h2 id=\"具体步骤：\"><a href=\"#具体步骤：\" class=\"headerlink\" title=\"具体步骤：\"></a>具体步骤：</h2><p><em>注：未提交过主题文件到git仓库的朋友无视前4步，直接从第5步开始</em></p>\n<ol>\n<li><p>将Yilia文件夹剪切到git仓库之外的目录（剪切可以防止自己的主题配置丢失）</p>\n</li>\n<li><p>提交从而删除本地git仓库之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送从而删除远程仓库(gihub)之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>此时登陆github查看themes文件夹，发现之前灰色的Yilia无效文件夹已经没了</p>\n</li>\n<li><p>将第1步剪切出去的Yilia的文件夹复制回Themes文件夹里</p>\n</li>\n<li><p>删除.git文件夹、.gitignore、.gitattributes这三项（经过实践发现删除.git文件夹一项即可，但其他两项已然无用，一并删除罢了）</p>\n</li>\n<li><p>提交从而增加本地git仓库之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送从而增加远程仓库(gihub)之中的Yilia</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>此时登陆github查看themes文件夹，发现Yilia文件夹及其内容已经成功推送</p>\n</li>\n<li><p>打完收工</p>\n</li>\n</ol>\n","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Hexo theme","slug":"Hexo-theme","permalink":"http://example.com/tags/Hexo-theme/"}]},{"title":"Hello World","date":"2017-01-11T08:44:54.000Z","path":"2017/01/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}]